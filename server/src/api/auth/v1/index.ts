import { lucia } from "@/lib/auth";
import { discord } from "@/lib/auth/helper/discord";
import DiscordUser from "@/lib/auth/helper/discord/api/autogenerated";
import { sendSuperJson } from "@/lib/superjson-sender";
import { generateState } from "arctic";
import { Router } from "express";
import { parseCookies, serializeCookie } from "lucia/dist/cookie";

export const authRouterV1 = Router();

authRouterV1.get("/@me", async (req, res) => {
  if (!res.locals.user || !res.locals.session) {
    return sendSuperJson(req, res, 401, {
      success: false,
      message: "You are not logged in.",
    });
  }

  return sendSuperJson(req, res, 200, {
    success: true,
    message: "You are logged in",
    data: {
      user: res.locals.user,
      session: res.locals.session,
    },
  });
});

authRouterV1.get("/discord", async (_, res) => {
  const state = generateState();
  const url = discord.createAuthorizationURL(state, ["identify"]);

  res
    .appendHeader(
      "Set-Cookie",
      serializeCookie("discord_oauth_state", state, {
        path: "/",
        secure: process.env.NODE_ENV === "production",
        httpOnly: true,
        maxAge: 60 * 10,
        sameSite: "lax",
      })
    )
    .redirect(url.toString());
});

authRouterV1.post("/discord/callback", async (req, res) => {
  if (res.locals.session || res.locals.user) {
    return sendSuperJson(req, res, 401, {
      success: false,
      message: "You are already logged in.",
    });
  }

  const code = req.query.code?.toString() ?? null;
  const state = req.query.state?.toString() ?? null;

  const storedState =
    parseCookies(req.headers.cookie ?? "").get("discord_oauth_state") ?? null;

  if (!code || !state || !storedState || state !== storedState) {
    return sendSuperJson(
      req,
      res,
      400,
      {
        success: false,
        message: "Failed to complete authentication.",
      },
      {
        message:
          "There has been some problem with the states. Check the data object.",
        data: { code, state, storedState },
      }
    );
  }

  try {
    const tokens = await discord.validateAuthorizationCode(code);
    const response = await fetch("https://discord.com/api/users/@me", {
      headers: {
        Authorization: `Bearer ${tokens.accessToken()}`,
      },
    });
    const discord_json: DiscordUser = await response.json();

    if (discord_json.code === 0) {
      return sendSuperJson(
        req,
        res,
        400,
        {
          success: false,
          message: "Failed to complete authentication.",
        },
        {
          message: "Discord response failed. Check data object.",
          data: discord_json,
        }
      );
    }
  } catch {}
});

authRouterV1.post("/logout", async (req, res) => {
  if (!res.locals.session || !res.locals.user) {
    return sendSuperJson(req, res, 401, {
      success: false,
      message: "You are not logged in.",
    });
  }

  await lucia.invalidateSession(res.locals.session.id);

  res.setHeader("Set-Cookie", lucia.createBlankSessionCookie().serialize());

  return sendSuperJson(req, res, 200, {
    success: true,
    message: "You have successfully been logged out",
    data: {},
  });
});
